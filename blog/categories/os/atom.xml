<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os | MonaDogg's blog]]></title>
  <link href="http://MonaDogg.github.io/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://MonaDogg.github.io/"/>
  <updated>2013-11-24T21:01:08+08:00</updated>
  <id>http://MonaDogg.github.io/</id>
  <author>
    <name><![CDATA[MonaDogg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[20131124]近期学习计划]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/24/jin-qi-xue-xi-ji-hua/"/>
    <updated>2013-11-24T20:32:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/24/jin-qi-xue-xi-ji-hua</id>
    <content type="html"><![CDATA[<p>最近由于微博上好友分享的几篇越狱相关的好文章,让我步入了越狱的世界,THEOS和IOSOpenDev环境也都搭建好了,并且也调试了几个相关的demo,但是无奈手中没有越狱设备,所以调试程序也极不方便,况且越狱开发目前来看前景也不好,除了能从其他方面更加理解iphone 的sdk,在程序编写方面并不是帮助很大,但是吧,学习一门技术不能这么短视是吧?所以吧,我现在准备开始复习数据结构和算法相关的内容,由于精力的分散加上自己的懒惰,之前准备学习几次都失败了,所以现在决定再一次系统的学习下.</p>

<p>这里开一片日志,用来记录学习中的点滴.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git常用命令]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/16/gitchang-yong-ming-ling/"/>
    <updated>2013-11-16T22:35:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/16/gitchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<p>如果读者想成git高手,本文也许并不适合你,我在这里推荐一本书为&lt;Git权威指南>,这本书会介绍git的方方面面,如果读者是一位并不清楚git基础知识的读者,那么建议读者先从文章末尾的推荐阅读的资料开始学习git.本文主要记载日常使用git中常用的命令,并尽量讲清楚使用该命令的使用场景.</p>

<h1>1.本地操作</h1>

<h2>1.1初始化</h2>

<h3>1.1.1全局变量</h3>

<pre>
git config --global user.name "xxx"

git config --global user.email "xxx@qq.com"

git config --global color.ui "always"
</pre>


<h3>1.1.2初始化新版本库</h3>

<pre>
git init 只会在根目录下建立一个名为.git文件夹
</pre>


<h3>1.1.3设置忽略的文件</h3>

<p><strong>1.设置每个人都需要忽略的文件</strong></p>

<p>1)在根目录新建一个名为.gitignore的文本文件</p>

<p>2)在命令行执行echo *.jpg>.gitignore,注意>左右不要有空格</p>

<p>3)将.gitignore文件加入版本库并提交</p>

<p><strong>2.设置只有自己忽略的文件</strong></p>

<p>1)修改.git/info/exclude文件</p>

<p>2)可以使用正则表达式,例如*.[oa]等价于*.o和*.a</p>

<h3>1.1.4添加文件到版本库</h3>

<p><strong>1.添加单个文件</strong></p>

<pre>
git add somefile.tet
</pre>


<p><strong>2.添加所有txt文件</strong></p>

<pre>
git add *.txt
</pre>


<p><strong>3.添加所有文件</strong></p>

<pre>
git add . 包含子目录但是不包含空目录
</pre>


<h3>1.1.5提交</h3>

<p><strong>1.提交</strong></p>

<pre>
git commit -m "add all files"
</pre>


<h2>1.2日常操作</h2>

<h3>1.2.1提交</h3>

<p><strong>1.提交所有修改</strong></p>

<pre>
git commit -m "some message" -a
</pre>


<p><strong>2.提交单个文件</strong></p>

<pre>
git commit -m "some message" readMe.txt
</pre>


<p><strong>3.增补提交</strong></p>

<pre>
git commit -C head -a -amend 
</pre>


<p>不会产生新的提交历史记录</p>

<h3>1.2.2撤销修改</h3>

<p><strong>1.撤销尚未提交的修改</strong></p>

<p>1)撤销少量文件</p>

<pre>
git checkout head readMe.txt toDo.txt
</pre>


<p>2)撤销所有txt文件</p>

<pre>
git checkout head *.txt
</pre>


<p>3)撤销所有文件</p>

<pre>
git checkout head
</pre>


<p><strong>2.撤销提交后的修改</strong></p>

<p>1)撤销某次提交,但是这次操作也会作为一次提交保存</p>

<pre>
git revert -no-commit head
</pre>


<p>2)复位,将当前head内容重置,会留下痕迹</p>

<pre>
git reset head/git reset head &lt;filename>
</pre>


<p>3)复位到head之前的版本,不会在版本库留下痕迹</p>

<pre>
git reset --hard head^
</pre>


<p>4)永久删除最后3个commit(即HEAD, HEAD^和HEAD~2)</p>

<pre>
git reset --hard head~3
</pre>


<h3>1.2.3分支</h3>

<p>1)列出本地分支</p>

<pre>
git branch
</pre>


<p>2)列出所有分支</p>

<pre>
git branch -a
</pre>


<p>3)基于当前分支末梢创建新分支</p>

<pre>
git branch &lt;branchname>
</pre>


<p>4)检出分支</p>

<pre>
git checkout &lt;branchname>
</pre>


<p>5)基于当前分支的末梢创建新分支并检出分支</p>

<pre>
git checkout -b &lt;branchname>
</pre>


<p>6)基于某次提交/分支/标签 创建新分支</p>

<pre>
git branch emputy bfe57de0      //用来查看某个历史断面很方便

git branch emputy2 emputy       //基于分支创建分支
</pre>


<p>7)合并分支</p>

<p><strong>1.普通合并</strong>:把两条分支以上的历史轨迹合并，交汇到一起</p>

<p>合并并提交,如果发生冲突就不会自动提交,如果冲突很多,不想立即解决他们,可以直接使用git checkout head撤销所有尚未提交的修改.</p>

<pre>
git merage &lt;branchname>
</pre>


<p>合并但并不提交</p>

<pre>
git merage --no--commit
</pre>


<p><strong>2.压合合并</strong>:将一条分支上的若干个提交条目合成一个提交条目，提交到另一个分支末梢。</p>

<p>压合合并并提交</p>

<pre>
git merge --squash &lt;branchname>
</pre>


<p>压合合并并不提交</p>

<pre>
git merge --squash --no-commit &lt;branchname>
</pre>


<p><strong>3.拣选合并</strong>:拣选另一条分支上的某个提交条目的改动带到当前分支上。</p>

<p>挑选某次提交合并但不提交</p>

<pre>
git cherry-pick --no-commit 5b62b6
</pre>


<p>8)重命名分支</p>

<pre>
git branch -m &lt;branchname>&lt;newname> 不会覆盖已存在同名分支

git branch -M &lt;branchname>&lt;newname> 会覆盖已存在的同名分支
</pre>


<p>9)删除分支</p>

<pre>
git branch -d new2  如果分支没有被合并会删除失败

git branch -D new2  如果分支没有被合并也会被删除
</pre>


<h3>1.2.4解决冲突</h3>

<p>1)冲突很少时,直接编辑冲突文件提交即可</p>

<h3>1.2.5标签</h3>

<p>1)创建标签</p>

<p><strong>1.为当前分支最近一次提交创建标签</strong></p>

<pre>
git tag 1.0 //标签无法重新命名
</pre>


<p><strong>2.为其他分支最近一次提交创建标签</strong></p>

<pre>
git tag tagName branchName
</pre>


<p><strong>3.为某次历史提交创建标签</strong></p>

<pre>
git tag 1.1 4e6861d5
</pre>


<p>2)显示标签列表</p>

<pre>
git tag
</pre>


<p>3)检出标签</p>

<pre>
git checkout 1.0    //查看标签断面很重要,但是不能提交
</pre>


<p>4)由标签创建分支</p>

<pre>
git branch b1.1 1.1
git checkout -b b1.1 1.1
</pre>


<p>5)删除标签</p>

<pre>
git tag -d 1.1
</pre>


<h3>1.2.6查看状态</h3>

<p>1)当前状态</p>

<pre>
git status
</pre>


<p>2)历史记录</p>

<pre>

git log

gitk    //查看当前分支的历史记录

gitk &lt;branchname>    //查看某分支历史记录

gitk --all  //查看所有分支

git branch -v   //每个分之最后的提交

</pre>


<h3>1.2.7其他</h3>

<p>1)git导出项目,更多用法请参照git help archive</p>

<pre>

git archive [options] &lt;tree-ish> [&lt;path>…]

git archive --format zip -o filename.zip HEAD

git archive --format zip -o filename.zip source

</pre>


<p><strong>一其中tree-ish可以是:</strong></p>

<pre>
HEAD
Tags
Branch names
Branch names with remotes, like origin/somebranch
</pre>


<h1>2.远程操作</h1>

<h2>2.1初始化</h2>

<p>1)克隆版本库</p>

<pre>
git clone &lt;url>
</pre>


<p>2)别名</p>

<pre>
git remote add &lt;别名> &lt;远程版本库的URL>   //添加远程版本库的别名

git remote rm &lt;别名>       //删除远程库的别名和相关分支
</pre>


<h2>2.2日常操作</h2>

<p>1)分支</p>

<pre>
git branch -r   //列出远程分支

git remote prune origin     //删除远程库中已经不存在的分支
</pre>


<p>2)从远程获取</p>

<p><strong>1.获取远程版本库但是并不合并</strong></p>

<pre>
git fetch &lt;远程版本库>  //获取但不合并

git fetch origin    //origin是远程库的别名

git fetch d:\git\source     //本地版本库
</pre>


<p><strong>2.获取远程版本库并且和当前分支合并</strong></p>

<pre>
git pull origin 

git pull d:\git\source master
</pre>


<p>3)推入远程库</p>

<pre>

git push origin master  //推入远程库
</pre>


<p><strong>参考文献:</strong></p>

<p>1.本文内容来自:weibo.com/crespoxiao的微博配图</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用unix命令]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/15/chi-xu-geng-xin-maczhong-duan-chang-yong-ming-ling/"/>
    <updated>2013-11-15T16:59:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/15/chi-xu-geng-xin-maczhong-duan-chang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>1.列出文件</h3>

<p>ls 参数 目录名</p>

<h3>2.转换目录</h3>

<p>cd</p>

<h3>3.建立新目录</h3>

<p>mkdir 目录名
mkdir /User/用户名/Desktop/backup</p>

<h3>4.拷贝文件</h3>

<p>cp 参数 源文件 目标文件
把驱动目录下的所有文件备份到桌面backup
cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</p>

<h3>5.删除文件</h3>

<p>rm 参数 文件
rm -rf /System/Library/Extensions.kextcache
参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了</p>

<h3>6.移动文件</h3>

<p>mv 文件
例：想把AppleHDA.Kext 移到桌面
mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</p>

<h3>7.文本编辑</h3>

<p>nano 文件名<br/>
vim 文件名</p>

<h3>8.删除一个目录</h3>

<p>rmdir dirname</p>

<h3>9.移动或重命名一个目录</h3>

<p>mvdir dir1 dir2</p>

<h3>10.显示当前目录的路径名</h3>

<p>pwd</p>

<h3>11.生成一个新文件</h3>

<p>touch readMe.txt</p>

<h3>12.重复上次的命令</h3>

<p>!!</p>

<h3>13.更改密码</h3>

<p>passwd</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[又是一个github博客]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/15/jin-tian-kai-shi-da-jian-wan-cheng-liao-githubbo-ke/"/>
    <updated>2013-11-15T16:17:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/15/jin-tian-kai-shi-da-jian-wan-cheng-liao-githubbo-ke</id>
    <content type="html"><![CDATA[<p>在github上拥有一个博客地址,本人觉得是一件挺酷的事情,于是乎翻遍了网上大部分的教程,在花费了一天半的时间后,终于搭建完成了,其中遇到了很多的坑,幸亏在时间的软磨硬泡下,一一被我解决了(主要是对ruby环境的不熟悉造成的).</p>

<h1>1.搭建ruby环境</h1>

<p>搭建rvm环境和相关的设置</p>

<p>rvm是一个命令行工具，可以提供一个便捷的多版本ruby环境的管理和切换,下面的代码是用来安装rvm的.</p>

<pre>
bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</pre>


<p>然后需要设置环境变量:</p>

<pre>
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
source ~/.bash_profile

# If using Zsh do this instead
echo '[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm' >> ~/.zshrc
source ~/.zshrc
</pre>


<p>最终需要安装ruby环境(不知道为何安装1.9.2会报奇怪的错,换成1.9.3就好了):</p>

<pre>
rvm install 1.9.3 && rvm use 1.9.3
rvm rubygems latest
</pre>


<h1>2.安装Octopress</h1>

<p>克隆代码到当前目录下,并且进入octopress目录:</p>

<pre>
git clone git://github.com/imathis/octopress.git octopress
cd octopress
</pre>


<p>安装相关的依赖库:</p>

<pre>
gem install bundler
bundle install
</pre>


<p>最后安装Octopress</p>

<pre>
rake install
</pre>


<h1>3.简单设置你的博客</h1>

<p>1)修改文件_config.yml,里面基本上是一些博客名称,作者姓名等等之类的设置信息.</p>

<p>2)修改source文件夹下一些html中twitter,google等政府屏蔽网站的相关资源,会造成页面加载缓慢,具体判断建议使用chrome,查看每项资源的加载时间,将无法获取的资源保存到本地,或者换为墙内的加载地址.</p>

<h1>4.设置github账号</h1>

<p>在github上创建一个名为 账号名.github.com 的代码仓库。</p>

<h1>5.写博客</h1>

<p>写博客的主要命令为：</p>

<pre>
rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可
rake generate 生成静态文件
rake preview 在http://localhost:4000 访问博文内容
rake deploy 将生成的博文推送到你的github上
</pre>


<p>同时我也建议把所有的源码也推送到github进行保存,代码一般为:</p>

<pre>
git add .
git commit -m "add source files"
git push origin source
</pre>


<h1>6.关于markdown</h1>

<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”</p>

<p>我们在github上面存放的博客其实是通过ruby下的一个框架,将我们使用markdown语法编写的博文
转换为html网页.在这里赞赏下网友们的智慧.</p>

<p>而markdown的教程网上有很多,你可以先点击<a href="http://zh.wikipedia.org/wiki/Markdown">这里</a>进行了解.</p>

<h1>7.美化我们的博客</h1>

<p>如果你觉得我们安装好的博客挺丑的,而且评论功能也很难用,还有那个定制栏能不能放点别的什么,那我们就需要动手改造了,在这里我仅仅介绍下安装主题的方法.</p>

<p>我使用的主题是<a href="https://github.com/gehaxelt/CSS-WhiteLake">whitelake</a>:</p>

<pre>
cd octopress
git clone https://github.com/gehaxelt/CSS-WhiteLake.git .themes/whitelake
rake install['whitelake']
rake generate
rake preview
</pre>


<p>别的模块定制方法也许你应该看看<a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">这个</a>.</p>

<p><strong>参考文献:</strong></p>

<p>1.首先感谢唐巧的博客,本文的大部分内容都是来自他的一篇<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">博文</a>,作为iOS工程师我也建议你关注他们的微博,并且仔细研读他的每篇博文,真是收获颇丰.</p>

<p>2.<a href="http://ishalou.com/blog/2012/10/15/how-to-use-octopress/">http://ishalou.com/blog/2012/10/15/how-to-use-octopress/</a></p>

<p>3.<a href="http://hahaya.github.io/2013/06/26/build-blog-on-github.html">http://hahaya.github.io/2013/06/26/build-blog-on-github.html</a></p>

<p>4.<a href="http://www.cnblogs.com/rubylouvre/archive/2012/06/10/2543706.html">http://www.cnblogs.com/rubylouvre/archive/2012/06/10/2543706.html</a></p>

<p>5.<a href="http://easypi.github.io/blog/2013/01/05/using-octopress-to-setup-blog-on-github/">http://easypi.github.io/blog/2013/01/05/using-octopress-to-setup-blog-on-github/</a></p>

<p>以下是美化博客:</p>

<p>6.<a href="http://yanping.me/cn/blog/2012/01/07/theming-and-customization/">http://yanping.me/cn/blog/2012/01/07/theming-and-customization/</a></p>

<p>7.<a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/</a></p>

<p>8.<a href="http://xuhehuan.com/886.html">http://xuhehuan.com/886.html</a></p>

<p>9.<a href="http://lucifr.com/2012/02/05/slash-theme-for-octopress/">http://lucifr.com/2012/02/05/slash-theme-for-octopress/</a></p>
]]></content>
  </entry>
  
</feed>
