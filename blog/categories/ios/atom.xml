<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | MonaDogg's blog]]></title>
  <link href="http://MonaDogg.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://MonaDogg.github.io/"/>
  <updated>2013-11-19T09:48:02+08:00</updated>
  <id>http://MonaDogg.github.io/</id>
  <author>
    <name><![CDATA[MonaDogg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[越狱开发知乎精彩回答]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/19/jailbreakdoc01/"/>
    <updated>2013-11-19T09:37:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/19/jailbreakdoc01</id>
    <content type="html"><![CDATA[<p>最近笔者研究越狱开发,现总结了一些资料知乎上他人对越狱开发学习流程的精彩回答.</p>

<p>1.suu，iOS Researcher</p>

<pre>
①去Cydia下载Theos Tutorials，并在谷歌上了解theos相关信息。
②Mac上安装iOSOpenDev，并了解相关信息。
入门教程最多Hello World，剩下的去Github上找源码吧，比如killbackgrounds

我也上传了一个:
http://github.com/al1enSuu/Slide2Dismiss
</pre>


<p>2.季逸超，Peak-Labs创始人/CEO,猛犸浏览器、Rasgue…</p>

<pre>
有幸被邀请回答，不过不知道您要了解的'系统机制'有多深入? ;-)
按照意图和深度的话，大概有这么几种途径与资源：

1.为了学习框架，提升开发水平，可以看看私有API列表。iOS (Cocoa Touch)的各私有API都可以通过runtime查看获得，您可以自己写个method browser。如果觉得麻烦的话可以到Github看现成的，我收藏了俩: https://github.com/kennytm/iphone-private-frameworks 和 https://github.com/nst/iOS-Runtime-Headers ，但还是推荐自己来实时获取，因为iOS在更新，API也在更新。在App Store产品中使用私有API是违反苹果规定的，所以能不用这些API而实现一些功能是iOS工程师水平的体现。

2.对iOS工程师而言，如果只是开发的话(1)也就差不多了。如果您十分有爱，想了解API以下的东西的话，依然可以利用Obj-C的runtime。可以在这里看到 http://opensource.apple.com/source/objc4/objc4-493.11/runtime/ ，尤其是objc-runtime.m，这里提供了很多学习用的"工具"。比如经典的method_exchangeImplementations()，您可以用它研究很多黑箱过程的来龙去脉。值得一提的是，这种技巧(method swizzling)是合法的,可以在App Store 中使用! 苹果曾给使用了相关技巧的开发者发过邮件，表示出于安全性和稳定性最好不再使用，但没有禁止。

3.如果是对系统本身感兴趣的话，不妨越狱看看。iOS和Mac OS X类似，基于Darwin，是一种UNIX系统。越狱后你就有了root权，可以安装个Terminal，装gcc都没问题的哈哈~ 接下来就像您研究Linux那样摆弄就好了。对于开发者来说，有了root权也就可以写一些system tweak或全局的代码，自然也可以用来深入了解系统、原生app等。这方面我很久没折腾了，所以不敢瞎说。

4.如果您是想成为一名iOS Hacker的话，最近有本书挺火的: http://www.amazon.com/iOS-Hackers-Handbook-Charlie-Miller/ 我没空看不知道咋样，但作者很神。另外现在iOS越狱界也有了自己的大会，可以看看“越狱梦之队”的演讲和文档: http://absinthejailbreak.com/dream-team-presentation-at-hitbsecconf-videos/ 。如果您还是没有满足的话，可以看看从硬件入手的逆向工程和调试，分享一个我收藏的宝贝: http://wenku.baidu.com/view/dae22c30eefdc8d376ee32c9.html

5.另外说iOS代码是封闭/闭源的其实不全对，苹果算是开源界的一面大旗了，比如WebKit。iOS的组成部分也一样是开源的，可以在官网 http://opensource.apple.com/ 看到，最新的iOS 5.1.1在这: http://opensource.apple.com/release/ios-511/ 。但是如您所见，这里并没有iOS操作系统的代码，而是一些库和编译器、调试器...其中JavaScriptCore和WebCore很有用，这两者是WebKit的基础，可以说WebKit是iOS最重要的组成之一，截止iOS 5 (6我还没下呢=___=)，所有多于一行文字的控件其实都是WebKit标准的(不可思议吧?!)。很多iOS的Hack都是从这里开始的。说到WebKit,之前Comex大神的Spirit越狱(那个"Slide to Jailbreak")就是利用Safari->WebKit->PDF Engine->TIFF字体的漏洞实现了代码注入！所以每一个系统组件都可能是iOS逆向/Hack的突破口！

</pre>


<p>参考资料:
1.<a href="http://www.zhihu.com/question/20954912">http://www.zhihu.com/question/20954912</a>
2.<a href="http://www.zhihu.com/question/20317296/answer/14735312">http://www.zhihu.com/question/20317296/answer/14735312</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[越狱开发相关笔记]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/18/jailbreaknote01/"/>
    <updated>2013-11-18T13:06:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/18/jailbreaknote01</id>
    <content type="html"><![CDATA[<h1>1准备工具</h1>

<h2>1安装iOS sdk</h2>

<p>Step1:安装<a href="http://developer.apple.com/devcenter/ios/index.action">iOS SDK</a>.</p>

<h2>2下载theos</h2>

<p>可以简单理解theos为越狱开发的环境</p>

<pre>
export THEOS=/opt/theos
//设置环境变量
svn co http://svn.howett.net/svn/theos/trunk $THEOS
//svn下载相关内容到位置
</pre>


<p>可以使用下列语句打印看看:</p>

<pre>
echo $THEOS
</pre>


<h2>3下载ldid</h2>

<p>ldid的功能是给app签名</p>

<p>下载并解压到桌面上:
<a href="http://cloud.github.com/downloads/rpetrich/ldid/ldid.zip">http://cloud.github.com/downloads/rpetrich/ldid/ldid.zip</a></p>

<pre>
chmod +x ~/Desktop/ldid
//设置ldid可以执行的权限

mv ~/Desktop/ldid $THEOS/bin/ldid
//将ldid移动到指定的位置
</pre>


<h2>4安装MacPorts和dpkg</h2>

<p>1.先安装<a href="http://www.macports.org/install.php">Macports</a>,选择合适的系统版本,有可能会卡在最后一分钟，需要重启后断网安装即可。</p>

<p>2.dpkg的作用是将你的app打包为debian paceage.</p>

<pre>
sudo port install dpkg
</pre>


<h2>5创建一个新的项目</h2>

<p>theos使用一个叫做nic(new instance tool)的工具来创建新的工程。执行下面的命令：</p>

<pre>
$THEOS/bin/nic.pl
</pre>


<p>就可以开始创建。下面是一个创建jailbroken 应用程序的例子：</p>

<pre>
author$ $THEOS/bin/nic.pl
NIC 1.0 - New Instance Creator
——————————
  [1.] iphone/application
  [2.] iphone/library
  [3.] iphone/preference_bundle
  [4.] iphone/tool
  [5.] iphone/tweak
Choose a Template (required): 1
Project Name (required): firstdemo
Package Name [com.yourcompany.firstdemo]: 
Author/Maintainer Name [Author Name]: 
Instantiating iphone/application in firstdemo/…
Done.
</pre>


<p>这样就会在当前目录下创建一个名为fistdemo的文件夹</p>

<h2>6生成文件说明</h2>

<p>1.control: 包含applicaton/tweak的信息，当你从Cydia安装时，你可以看到这些信息，包括名字，作者，版本，等等。</p>

<p>2.main.m，程序启动的入口.</p>

<p>3.firstDemoApplication:app的代理文件类</p>

<p>4.Makefile：包含必要的编译命令</p>

<p>5.Resources：包含info.plist文件等</p>

<p>6.RootViewController.h/mm :根vc</p>

<p>其中Makefile的内容为:</p>

<pre>
include theos/makefiles/common.mk

APPLICATION_NAME = firstDemo
firstDemo_FILES = main.m firstDemoApplication.mm RootViewController.mm
firstDemo_FRAMEWORKS = UIKit CoreGraphics

include $(THEOS_MAKE_PATH)/application.mk

</pre>


<h2>7重新设置环境变量</h2>

<p>设置下列环境变量:环境位置,sdk版本,设备ip地址.</p>

<pre>
export THEOS=/opt/theos/
export SDKVERSION=7.0
export THEOS_DEVICE_IP=xxx.xxx.xxx.xxx
</pre>


<h2>8构建工程</h2>

<p><strong>1.make</strong></p>

<pre>
$ make
Making all for application firstdemo…
 Compiling main.m…
 Compiling firstdemoApplication.mm…
 Compiling RootViewController.mm…
 Linking application firstdemo…
 Stripping firstdemo…
 Signing firstdemo…
</pre>


<p><strong>2.make package</strong></p>

<pre>
make package
Making all for application firstdemo…
make[2]: Nothing to be done for ‘internal-application-compile’.
Making stage for application firstdemo…
 Copying resource directories into the application wrapper…
dpkg-deb: building package ‘com.yourcompany.firstdemo’ in ‘/Users/author/Desktop/firstdemo/com.yourcompany.firstdemo_0.0.1-1_iphoneos-arm.deb’.
</pre>


<p><strong>3.make install</strong></p>

<pre>
$ make package install
Making all for application firstdemo…
make[2]: Nothing to be done for `internal-application-compile’.
Making stage for application firstdemo…
 Copying resource directories into the application wrapper…
dpkg-deb: building package ‘com.yourcompany.firstdemo’ in ‘/Users/author/Desktop/firstdemo/com.yourcompany.firstdemo_0.0.1-1_iphoneos-arm.deb’.
...
root@ip’s password: 
...
</pre>


<p>这个过程会提示你输入几次iphone或者ipad的密码。默认是:alpine.</p>

<p><strong>参考资料</strong></p>

<p>1.<a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-1/">http://wufawei.com/2013/08/iOS-jailbroken-programming-1/</a></p>
]]></content>
  </entry>
  
</feed>
