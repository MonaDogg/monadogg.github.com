<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MonaDogg's blog]]></title>
  <link href="http://MonaDogg.github.io/atom.xml" rel="self"/>
  <link href="http://MonaDogg.github.io/"/>
  <updated>2013-11-21T11:37:06+08:00</updated>
  <id>http://MonaDogg.github.io/</id>
  <author>
    <name><![CDATA[MonaDogg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[越狱开发知乎精彩回答]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/19/jailbreakdoc01/"/>
    <updated>2013-11-19T09:37:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/19/jailbreakdoc01</id>
    <content type="html"><![CDATA[<p>最近笔者研究越狱开发,现总结了一些资料知乎上他人对越狱开发学习流程的精彩回答.</p>

<p>1.suu，iOS Researcher</p>

<pre>
①去Cydia下载Theos Tutorials，并在谷歌上了解theos相关信息。
②Mac上安装iOSOpenDev，并了解相关信息。
入门教程最多Hello World，剩下的去Github上找源码吧，比如killbackgrounds

我也上传了一个:
http://github.com/al1enSuu/Slide2Dismiss
</pre>


<p>2.季逸超，Peak-Labs创始人/CEO,猛犸浏览器、Rasgue…</p>

<pre>
有幸被邀请回答，不过不知道您要了解的'系统机制'有多深入? ;-)
按照意图和深度的话，大概有这么几种途径与资源：

1.为了学习框架，提升开发水平，可以看看私有API列表。iOS (Cocoa Touch)的各私有API都可以通过runtime查看获得，您可以自己写个method browser。如果觉得麻烦的话可以到Github看现成的，我收藏了俩: https://github.com/kennytm/iphone-private-frameworks 和 https://github.com/nst/iOS-Runtime-Headers ，但还是推荐自己来实时获取，因为iOS在更新，API也在更新。在App Store产品中使用私有API是违反苹果规定的，所以能不用这些API而实现一些功能是iOS工程师水平的体现。

2.对iOS工程师而言，如果只是开发的话(1)也就差不多了。如果您十分有爱，想了解API以下的东西的话，依然可以利用Obj-C的runtime。可以在这里看到 http://opensource.apple.com/source/objc4/objc4-493.11/runtime/ ，尤其是objc-runtime.m，这里提供了很多学习用的"工具"。比如经典的method_exchangeImplementations()，您可以用它研究很多黑箱过程的来龙去脉。值得一提的是，这种技巧(method swizzling)是合法的,可以在App Store 中使用! 苹果曾给使用了相关技巧的开发者发过邮件，表示出于安全性和稳定性最好不再使用，但没有禁止。

3.如果是对系统本身感兴趣的话，不妨越狱看看。iOS和Mac OS X类似，基于Darwin，是一种UNIX系统。越狱后你就有了root权，可以安装个Terminal，装gcc都没问题的哈哈~ 接下来就像您研究Linux那样摆弄就好了。对于开发者来说，有了root权也就可以写一些system tweak或全局的代码，自然也可以用来深入了解系统、原生app等。这方面我很久没折腾了，所以不敢瞎说。

4.如果您是想成为一名iOS Hacker的话，最近有本书挺火的: http://www.amazon.com/iOS-Hackers-Handbook-Charlie-Miller/ 我没空看不知道咋样，但作者很神。另外现在iOS越狱界也有了自己的大会，可以看看“越狱梦之队”的演讲和文档: http://absinthejailbreak.com/dream-team-presentation-at-hitbsecconf-videos/ 。如果您还是没有满足的话，可以看看从硬件入手的逆向工程和调试，分享一个我收藏的宝贝: http://wenku.baidu.com/view/dae22c30eefdc8d376ee32c9.html

5.另外说iOS代码是封闭/闭源的其实不全对，苹果算是开源界的一面大旗了，比如WebKit。iOS的组成部分也一样是开源的，可以在官网 http://opensource.apple.com/ 看到，最新的iOS 5.1.1在这: http://opensource.apple.com/release/ios-511/ 。但是如您所见，这里并没有iOS操作系统的代码，而是一些库和编译器、调试器...其中JavaScriptCore和WebCore很有用，这两者是WebKit的基础，可以说WebKit是iOS最重要的组成之一，截止iOS 5 (6我还没下呢=___=)，所有多于一行文字的控件其实都是WebKit标准的(不可思议吧?!)。很多iOS的Hack都是从这里开始的。说到WebKit,之前Comex大神的Spirit越狱(那个"Slide to Jailbreak")就是利用Safari->WebKit->PDF Engine->TIFF字体的漏洞实现了代码注入！所以每一个系统组件都可能是iOS逆向/Hack的突破口！

</pre>


<p>参考资料:
1.<a href="http://www.zhihu.com/question/20954912">http://www.zhihu.com/question/20954912</a>
2.<a href="http://www.zhihu.com/question/20317296/answer/14735312">http://www.zhihu.com/question/20317296/answer/14735312</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[越狱开发相关笔记]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/18/jailbreaknote01/"/>
    <updated>2013-11-18T13:06:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/18/jailbreaknote01</id>
    <content type="html"><![CDATA[<h1>1准备工具</h1>

<h2>1安装iOS sdk</h2>

<p>Step1:安装<a href="http://developer.apple.com/devcenter/ios/index.action">iOS SDK</a>.</p>

<h2>2下载theos</h2>

<p>可以简单理解theos为越狱开发的环境</p>

<pre>
export THEOS=/opt/theos
//设置环境变量
svn co http://svn.howett.net/svn/theos/trunk $THEOS
//svn下载相关内容到位置
</pre>


<p>可以使用下列语句打印看看:</p>

<pre>
echo $THEOS
</pre>


<h2>3下载ldid</h2>

<p>ldid的功能是给app签名</p>

<p>下载并解压到桌面上:
<a href="http://cloud.github.com/downloads/rpetrich/ldid/ldid.zip">http://cloud.github.com/downloads/rpetrich/ldid/ldid.zip</a></p>

<pre>
chmod +x ~/Desktop/ldid
//设置ldid可以执行的权限

mv ~/Desktop/ldid $THEOS/bin/ldid
//将ldid移动到指定的位置
</pre>


<h2>4安装MacPorts和dpkg</h2>

<p>1.先安装<a href="http://www.macports.org/install.php">Macports</a>,选择合适的系统版本,有可能会卡在最后一分钟，需要重启后断网安装即可。</p>

<p>2.dpkg的作用是将你的app打包为debian paceage.</p>

<pre>
sudo port install dpkg
</pre>


<h2>5创建一个新的项目</h2>

<p>theos使用一个叫做nic(new instance tool)的工具来创建新的工程。执行下面的命令：</p>

<pre>
$THEOS/bin/nic.pl
</pre>


<p>就可以开始创建。下面是一个创建jailbroken 应用程序的例子：</p>

<pre>
author$ $THEOS/bin/nic.pl
NIC 1.0 - New Instance Creator
——————————
  [1.] iphone/application
  [2.] iphone/library
  [3.] iphone/preference_bundle
  [4.] iphone/tool
  [5.] iphone/tweak
Choose a Template (required): 1
Project Name (required): firstdemo
Package Name [com.yourcompany.firstdemo]: 
Author/Maintainer Name [Author Name]: 
Instantiating iphone/application in firstdemo/…
Done.
</pre>


<p>这样就会在当前目录下创建一个名为fistdemo的文件夹</p>

<h2>6生成文件说明</h2>

<p>1.control: 包含applicaton/tweak的信息，当你从Cydia安装时，你可以看到这些信息，包括名字，作者，版本，等等。</p>

<p>2.main.m，程序启动的入口.</p>

<p>3.firstDemoApplication:app的代理文件类</p>

<p>4.Makefile：包含必要的编译命令</p>

<p>5.Resources：包含info.plist文件等</p>

<p>6.RootViewController.h/mm :根vc</p>

<p>其中Makefile的内容为:</p>

<pre>
include theos/makefiles/common.mk

APPLICATION_NAME = firstDemo
firstDemo_FILES = main.m firstDemoApplication.mm RootViewController.mm
firstDemo_FRAMEWORKS = UIKit CoreGraphics

include $(THEOS_MAKE_PATH)/application.mk

</pre>


<h2>7重新设置环境变量</h2>

<p>设置下列环境变量:环境位置,sdk版本,设备ip地址.</p>

<pre>
export THEOS=/opt/theos/
export SDKVERSION=7.0
export THEOS_DEVICE_IP=xxx.xxx.xxx.xxx
</pre>


<h2>8构建工程</h2>

<p><strong>1.make</strong></p>

<pre>
$ make
Making all for application firstdemo…
 Compiling main.m…
 Compiling firstdemoApplication.mm…
 Compiling RootViewController.mm…
 Linking application firstdemo…
 Stripping firstdemo…
 Signing firstdemo…
</pre>


<p><strong>2.make package</strong></p>

<pre>
make package
Making all for application firstdemo…
make[2]: Nothing to be done for ‘internal-application-compile’.
Making stage for application firstdemo…
 Copying resource directories into the application wrapper…
dpkg-deb: building package ‘com.yourcompany.firstdemo’ in ‘/Users/author/Desktop/firstdemo/com.yourcompany.firstdemo_0.0.1-1_iphoneos-arm.deb’.
</pre>


<p><strong>3.make install</strong>
执行次操作之前确保iPhone安装了OpenSSH,并且在同一局域网.</p>

<pre>
$ make package install
Making all for application firstdemo…
make[2]: Nothing to be done for `internal-application-compile’.
Making stage for application firstdemo…
 Copying resource directories into the application wrapper…
dpkg-deb: building package ‘com.yourcompany.firstdemo’ in ‘/Users/author/Desktop/firstdemo/com.yourcompany.firstdemo_0.0.1-1_iphoneos-arm.deb’.
...
root@ip’s password: 
...
</pre>


<p>这个过程会提示你输入几次iphone或者ipad的密码。默认是:alpine.</p>

<h2>9.构建一个Tweak</h2>

<p>本文介绍如果hook ios中任意类的方法的例子.</p>

<p><strong>1.下载<a href="http://www.mediafire.com/?2upm53uzzj0488u">libsubstrate.dylib</a>到/opt/theos/lib.</strong></p>

<p><strong>2.class-dump相关头文件到/opt/theos/include目录下</strong></p>

<p><strong>3.创建tweak项目</strong></p>

<p>执行 $THEOS/bin/nic.pl,选择5</p>

<pre>
author$ $THEOS/bin/nic.pl
NIC 1.0 - New Instance Creator
——————————
  [1.] iphone/application
  [2.] iphone/library
  [3.] iphone/preference_bundle
  [4.] iphone/tool
  [5.] iphone/tweak

Choose a Template (required): 5
Project Name (required): WelcomeWagon 
Package Name [com.yourcompany.welcomewagon]: 
Author/Maintainer Name [Brandon Trebitowski]: 
MobileSubstrate Bundle filter [com.apple.springboard]: 
Instantiating iphone/tweak in welcomewagon/…
Done.
</pre>


<p><strong>4.改写Tweak.xm文件</strong></p>

<p>一旦你创建了项目，你会发现Theos生成了一个叫做Tweak.xm的文件，这是个特殊的文件，hook的相关代码就将写在这个文件。</p>

<pre>
#import <SpringBoard/SpringBoard.h>
//引入相关的dump出的头文件

%hook SpringBoard
//hook的类名

-(void)applicationDidFinishLaunching:(id)application {
%orig;
//执行原方法

UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Welcome" 
message:@"Welcome to your iPhone Brandon!" 
delegate:nil 
cancelButtonTitle:@"Thanks" 
otherButtonTitles:nil]
[alert show];
[alert release];
}
//新增的hook代码

%end
//代码结束

</pre>


<p><strong>5.更改makefile文件,加入相关的类库</strong></p>

<pre>
WelcomeWagon_FRAMEWORKS = UIKit
</pre>


<p><strong>6.make, make package, make install</strong></p>

<p><strong>参考资料</strong></p>

<p>1.<a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-1/">http://wufawei.com/2013/08/iOS-jailbroken-programming-1/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[持续更新]git常用命令]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/16/gitchang-yong-ming-ling/"/>
    <updated>2013-11-16T22:35:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/16/gitchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<p>如果读者想成git高手,本文也许并不适合你,我在这里推荐一本书为&lt;Git权威指南>,这本书会介绍git的方方面面,如果读者是一位并不清楚git基础知识的读者,那么建议读者先从文章末尾的推荐阅读的资料开始学习git.本文主要记载日常使用git中常用的命令,并尽量讲清楚使用该命令的使用场景.</p>

<h1>1.本地操作</h1>

<h2>1.1初始化</h2>

<h3>1.1.1全局变量</h3>

<pre>
git config --global user.name "xxx"

git config --global user.email "xxx@qq.com"

git config --global color.ui "always"
</pre>


<h3>1.1.2初始化新版本库</h3>

<pre>
git init 只会在根目录下建立一个名为.git文件夹
</pre>


<h3>1.1.3设置忽略的文件</h3>

<p><strong>1.设置每个人都需要忽略的文件</strong></p>

<p>1)在根目录新建一个名为.gitignore的文本文件</p>

<p>2)在命令行执行echo *.jpg>.gitignore,注意>左右不要有空格</p>

<p>3)将.gitignore文件加入版本库并提交</p>

<p><strong>2.设置只有自己忽略的文件</strong></p>

<p>1)修改.git/info/exclude文件</p>

<p>2)可以使用正则表达式,例如*.[oa]等价于*.o和*.a</p>

<h3>1.1.4添加文件到版本库</h3>

<p><strong>1.添加单个文件</strong></p>

<pre>
git add somefile.tet
</pre>


<p><strong>2.添加所有txt文件</strong></p>

<pre>
git add *.txt
</pre>


<p><strong>3.添加所有文件</strong></p>

<pre>
git add . 包含子目录但是不包含空目录
</pre>


<h3>1.1.5提交</h3>

<p><strong>1.提交</strong></p>

<pre>
git commit -m "add all files"
</pre>


<h2>1.2日常操作</h2>

<h3>1.2.1提交</h3>

<p><strong>1.提交所有修改</strong></p>

<pre>
git commit -m "some message" -a
</pre>


<p><strong>2.提交单个文件</strong></p>

<pre>
git commit -m "some message" readMe.txt
</pre>


<p><strong>3.增补提交</strong></p>

<pre>
git commit -C head -a -amend 
</pre>


<p>不会产生新的提交历史记录</p>

<h3>1.2.2撤销修改</h3>

<p><strong>1.撤销尚未提交的修改</strong></p>

<p>1)撤销少量文件</p>

<pre>
git checkout head readMe.txt toDo.txt
</pre>


<p>2)撤销所有txt文件</p>

<pre>
git checkout head *.txt
</pre>


<p>3)撤销所有文件</p>

<pre>
git checkout head
</pre>


<p><strong>2.撤销提交后的修改</strong></p>

<p>1)撤销某次提交,但是这次操作也会作为一次提交保存</p>

<pre>
git revert -no-commit head
</pre>


<p>2)复位,将当前head内容重置不会留下痕迹</p>

<pre>
git reset head/git reset head<filename>
</pre>


<p>3)复位到head之前的版本,不会在版本库留下痕迹</p>

<pre>
git reset --hard head^
</pre>


<p>4)永久删除最后3个commit(即HEAD, HEAD^和HEAD~2)</p>

<pre>
git reset --hard head~3
</pre>


<h3>1.2.3分支</h3>

<p>1)列出本地分支</p>

<pre>
git branch
</pre>


<p>2)列出所有分支</p>

<pre>
git branch -a
</pre>


<p>3)基于当前分支末梢创建新分支</p>

<pre>
git branch <branchname>
</pre>


<p>4)检出分支</p>

<pre>
git checkout <branchname>
</pre>


<p>5)基于当前分支的末梢创建新分支并检出分支</p>

<pre>
git checkout -b <branchname>
</pre>


<p>6)基于某次提交/分支/标签 创建新分支</p>

<pre>
git branch emputy bfe57de0      //用来查看某个历史断面很方便

git branch emputy2 emputy       //基于分支创建分支
</pre>


<p>7)合并分支</p>

<p><strong>1.普通合并</strong>:把两条分支以上的历史轨迹合并，交汇到一起</p>

<p>合并并提交,如果发生冲突就不会自动提交,如果冲突很多,不想立即解决他们,可以直接使用git checkout head撤销所有尚未提交的修改.</p>

<pre>
git merage <branchname>
</pre>


<p>合并但并不提交</p>

<pre>
git merage --no--commit
</pre>


<p><strong>2.压合合并</strong>:将一条分支上的若干个提交条目合成一个提交条目，提交到另一个分支末梢。</p>

<p>压合合并并提交</p>

<pre>
git merge --squash <branchname>
</pre>


<p>压合合并并不提交</p>

<pre>
git merge --squash --no-commit<branchname>
</pre>


<p><strong>3.拣选合并</strong>:拣选另一条分支上的某个提交条目的改动带到当前分支上。</p>

<p>挑选某次提交合并但不提交</p>

<pre>
git cherry-pick --no-commit 5b62b6
</pre>


<p>8)重命名分支</p>

<pre>
git branch -m <branchname><newname> 不会覆盖已存在同名分支

git branch -M <branchname><newname> 会覆盖已存在的同名分支
</pre>


<p>9)删除分支</p>

<pre>
git branch -d new2  如果分支没有被合并会删除失败

git branch -D new2  如果分支没有被合并也会被删除
</pre>


<h3>1.2.4解决冲突</h3>

<p>1)冲突很少时,直接编辑冲突文件提交即可</p>

<h3>1.2.5标签</h3>

<p>1)创建标签</p>

<p><strong>1.为当前分支最近一次提交创建标签</strong></p>

<pre>
git tag 1.0 //标签无法重新命名
</pre>


<p><strong>2.为其他分支最近一次提交创建标签</strong></p>

<pre>
git tag tagName branchName
</pre>


<p><strong>3.为某次历史提交创建标签</strong></p>

<pre>
git tag 1.1 4e6861d5
</pre>


<p>2)显示标签列表</p>

<pre>
git tag
</pre>


<p>3)检出标签</p>

<pre>
git checkout 1.0    //查看标签断面很重要,但是不能提交
</pre>


<p>4)由标签创建分支</p>

<pre>
git branch b1.1 1.1
git checkout -b b1.1 1.1
</pre>


<p>5)删除标签</p>

<pre>
git tag -d 1.1
</pre>


<h3>1.2.6查看状态</h3>

<p>1)当前状态</p>

<pre>
git status
</pre>


<p>2)历史记录</p>

<pre>

git log

gitk    //查看当前分支的历史记录

gitk <branchname>   //查看某分支历史记录

gitk --all  //查看所有分支

git branch -v   //每个分之最后的提交

</pre>


<h3>1.2.7其他</h3>

<p>1)git导出项目,更多用法请参照git help archive</p>

<pre>

git archive [options] < tree-ish > [< path >…]

git archive --format zip -o filename.zip HEAD

git archive --format zip -o filename.zip source

</pre>


<p><strong>一其中tree-ish可以是:</strong></p>

<pre>
HEAD
Tags
Branch names
Branch names with remotes, like origin/somebranch
</pre>


<h1>2.远程操作</h1>

<h2>2.1初始化</h2>

<h2>2.2日常操作</h2>

<h2>2.3github</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用unix命令]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/15/chi-xu-geng-xin-maczhong-duan-chang-yong-ming-ling/"/>
    <updated>2013-11-15T16:59:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/15/chi-xu-geng-xin-maczhong-duan-chang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>1.列出文件</h3>

<p>ls 参数 目录名</p>

<h3>2.转换目录</h3>

<p>cd</p>

<h3>3.建立新目录</h3>

<p>mkdir 目录名
mkdir /User/用户名/Desktop/backup</p>

<h3>4.拷贝文件</h3>

<p>cp 参数 源文件 目标文件
把驱动目录下的所有文件备份到桌面backup
cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</p>

<h3>5.删除文件</h3>

<p>rm 参数 文件
rm -rf /System/Library/Extensions.kextcache
参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了</p>

<h3>6.移动文件</h3>

<p>mv 文件
例：想把AppleHDA.Kext 移到桌面
mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</p>

<h3>7.文本编辑</h3>

<p>nano 文件名<br/>
vim 文件名</p>

<h3>8.删除一个目录</h3>

<p>rmdir dirname</p>

<h3>9.移动或重命名一个目录</h3>

<p>mvdir dir1 dir2</p>

<h3>10.显示当前目录的路径名</h3>

<p>pwd</p>

<h3>11.生成一个新文件</h3>

<p>touch readMe.txt</p>

<h3>12.重复上次的命令</h3>

<p>!!</p>

<h3>13.更改密码</h3>

<p>passwd</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天开始搭建完成了github博客]]></title>
    <link href="http://MonaDogg.github.io/blog/2013/11/15/jin-tian-kai-shi-da-jian-wan-cheng-liao-githubbo-ke/"/>
    <updated>2013-11-15T16:17:00+08:00</updated>
    <id>http://MonaDogg.github.io/blog/2013/11/15/jin-tian-kai-shi-da-jian-wan-cheng-liao-githubbo-ke</id>
    <content type="html"><![CDATA[<p>今天完成了github的博客搭建,现在记录下载大家过程中遇到的困难.</p>
]]></content>
  </entry>
  
</feed>
